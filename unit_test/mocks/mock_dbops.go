// Code generated by MockGen. DO NOT EDIT.
// Source: dbhelper/dpOperations.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	common "github.com/gauravlad21/sample-go-employee/common"
	gomock "github.com/golang/mock/gomock"
)

// MockDbOperationsIF is a mock of DbOperationsIF interface.
type MockDbOperationsIF struct {
	ctrl     *gomock.Controller
	recorder *MockDbOperationsIFMockRecorder
}

// MockDbOperationsIFMockRecorder is the mock recorder for MockDbOperationsIF.
type MockDbOperationsIFMockRecorder struct {
	mock *MockDbOperationsIF
}

// NewMockDbOperationsIF creates a new mock instance.
func NewMockDbOperationsIF(ctrl *gomock.Controller) *MockDbOperationsIF {
	mock := &MockDbOperationsIF{ctrl: ctrl}
	mock.recorder = &MockDbOperationsIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbOperationsIF) EXPECT() *MockDbOperationsIFMockRecorder {
	return m.recorder
}

// CloseDb mocks base method.
func (m *MockDbOperationsIF) CloseDb(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDb", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseDb indicates an expected call of CloseDb.
func (mr *MockDbOperationsIFMockRecorder) CloseDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDb", reflect.TypeOf((*MockDbOperationsIF)(nil).CloseDb), ctx)
}

// DeleteEmployee mocks base method.
func (m *MockDbOperationsIF) DeleteEmployee(ctx context.Context, id int32, tx ...*sql.Tx) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range tx {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmployee", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockDbOperationsIFMockRecorder) DeleteEmployee(ctx, id interface{}, tx ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, tx...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockDbOperationsIF)(nil).DeleteEmployee), varargs...)
}

// Exec mocks base method.
func (m *MockDbOperationsIF) Exec(ctx context.Context, query string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockDbOperationsIFMockRecorder) Exec(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDbOperationsIF)(nil).Exec), ctx, query)
}

// GetEmployeeById mocks base method.
func (m *MockDbOperationsIF) GetEmployeeById(ctx context.Context, id int32, tx ...*sql.Tx) (*common.Employee, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range tx {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmployeeById", varargs...)
	ret0, _ := ret[0].(*common.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeById indicates an expected call of GetEmployeeById.
func (mr *MockDbOperationsIFMockRecorder) GetEmployeeById(ctx, id interface{}, tx ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, tx...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeById", reflect.TypeOf((*MockDbOperationsIF)(nil).GetEmployeeById), varargs...)
}

// GetEmployeeByPagination mocks base method.
func (m *MockDbOperationsIF) GetEmployeeByPagination(ctx context.Context, offset, limit int32, tx ...*sql.Tx) ([]*common.Employee, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, offset, limit}
	for _, a := range tx {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmployeeByPagination", varargs...)
	ret0, _ := ret[0].([]*common.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByPagination indicates an expected call of GetEmployeeByPagination.
func (mr *MockDbOperationsIFMockRecorder) GetEmployeeByPagination(ctx, offset, limit interface{}, tx ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, offset, limit}, tx...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByPagination", reflect.TypeOf((*MockDbOperationsIF)(nil).GetEmployeeByPagination), varargs...)
}

// InsertEmployee mocks base method.
func (m *MockDbOperationsIF) InsertEmployee(ctx context.Context, req *common.Employee, tx ...*sql.Tx) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range tx {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertEmployee", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEmployee indicates an expected call of InsertEmployee.
func (mr *MockDbOperationsIFMockRecorder) InsertEmployee(ctx, req interface{}, tx ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, tx...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEmployee", reflect.TypeOf((*MockDbOperationsIF)(nil).InsertEmployee), varargs...)
}

// UpdateEmployee mocks base method.
func (m *MockDbOperationsIF) UpdateEmployee(ctx context.Context, req *common.Employee, tx ...*sql.Tx) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range tx {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEmployee", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockDbOperationsIFMockRecorder) UpdateEmployee(ctx, req interface{}, tx ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, tx...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockDbOperationsIF)(nil).UpdateEmployee), varargs...)
}
